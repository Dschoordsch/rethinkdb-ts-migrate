#! /usr/bin/env node
import meow from 'meow'
import * as path from 'path'
import {up, down, create} from '../lib/migrate'

const cli = meow([
    'Run all up migrations:',
    '  $ migrate-rethinkdb up',
    '',
    'Run all down migrations:',
    '  $ migrate-rethinkdb down',
    '',
    'Run one up migration:',
    '  $ migrate-rethinkdb up --one',
    '',
    'Run one down migration:',
    '  $ migrate-rethinkdb down --one',
    '',
    'Options:',
    ' -a, --all       run up/down ALL migrations',
    ' -l, --logLevel  debug | info | warning | error | none',
    ' -o, --one       run up/down ONE migrations',
    ' -r, --root      Specify file root',
    '',
    'Create a new migration script',
    '  $ migrate-rethinkdb create [migration name]'
  ].join('\n'),
  {
    alias: {
        a: 'all',
        l: 'logLevel',
        o: 'one',
        r: 'root'
    }
  });

const command = cli.input[0];
const pathname = cli.flags.root ? path.resolve(cli.flags.root) : process.cwd();

if(command === 'up' || command === 'down') {
  const all = cli.flags.all || false;
  const one = cli.flags.one || false;
  if (all && one) {
    console.error('Only one of --all or --one options may be specified');
    process.exit(1);
  }
  const config = {all: !one, root: pathname}

  if (command === 'up') {
    up(config)
  } else if (command === 'down') {
    down(config)
  }
} else if(command === 'create') {
  if(cli.input.length < 2) {
    console.error('No migration name specified');
    process.exit(1);
  }
  create(cli.input[1], pathname)
    .then(function (filepath) {
      console.log('Created migration', filepath);
      process.exit(0);
    })
    .catch(function (err) {
      console.error(err);
      process.exit(1);
    });
} else {
  console.log('unknown command');
  process.exit(1);
}

process.stdin.resume();
